# -*- coding: utf-8 -*-
"""work3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s4bWusK8VuyFyaVQX4mEFT9t-6NWNEVK
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset = pd.read_csv('/content/mushroom.csv',usecols=['class','cap-shape','cap-surface','cap-color','bruises','odor','gill-attachment','gill-spacing','gill-size','gill-color','stalk-shape','stalk-root','stalk-surface-above-ring','stalk-surface-below-ring','stalk-color-above-ring','stalk-color-below-ring','veil-type','veil-color','ring-number','ring-type','spore-print-color','population','habitat'])
dataset.head



pd.get_dummies(dataset,drop_first=True).head(5)

!pip install category_encoders
import category_encoders as ce

be = ce.BinaryEncoder()

temp = be.fit_transform(dataset)



temp

datasub = temp[['class_0','class_1','cap-shape_0','cap-shape_1','cap-shape_2','cap-shape_3','cap-surface_0','cap-surface_1','cap-surface_2','cap-color_0','cap-color_1','cap-color_2','cap-color_3','cap-color_4','bruises_0','bruises_1','odor_0','odor_1','odor_2','odor_3','odor_4','gill-attachment_0','gill-attachment_1','gill-spacing_0','gill-spacing_1','gill-size_0','gill-size_1','gill-color_0','gill-color_1','gill-color_2','gill-color_3','gill-color_4']]

import sklearn
from sklearn.tree import DecisionTreeClassifier as dt
from sklearn.model_selection import train_test_split

datasub.head(5)

X = datasub[['cap-shape_0','cap-shape_1','cap-shape_2','cap-shape_3','cap-surface_0','cap-surface_1','cap-surface_2','cap-color_0','cap-color_1','cap-color_2','cap-color_3','cap-color_4','bruises_0','bruises_1','odor_0','odor_1','odor_2','odor_3','odor_4','gill-attachment_0','gill-attachment_1','gill-spacing_0','gill-spacing_1','gill-size_0','gill-size_1','gill-color_0','gill-color_1','gill-color_2','gill-color_3','gill-color_4']]
y = datasub[['class_0','class_1']]
X_train,X_test,y_train,y_test = train_test_split(X,y,shuffle=False,test_size=0.3)
X_train

dtclf = dt()
dtclf.fit(X_train,y_train)

pred = dtclf.predict(X_test)

pred

print('preditctions',pred)
print('actual values',list(y_test))

from sklearn.metrics import accuracy_score
print('accuracy is ',accuracy_score(pred,y_test))

